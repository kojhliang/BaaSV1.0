页面流程：
main.jst(blockquery) -> exp-server(blockquery) -> blockquery.jst(BLOCKS) -> scripts(BLOCKS)


/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////// 优先级最高的功能 ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
1.区块查询部分（通过区块号查询，通过交易记录查询，网络peer节点的显示，dockerAPI实现容器启动和停止）

1.1查询管道
hyperledgerpeerintf.js/HyperledgerPeerIntf.prototype.chain 
参数：
channelName管道名称

1.2区块号查询
hyperledgerpeerintf.js/HyperledgerPeerIntf.prototype.block
参数
channelName管道名称
blockNum区块号

exp-server.js/app.get('/channel/:channelName/block/:blockNum')
参数
channelName管道名称
blockNum区块号


1.3交易记录查询

1.4网络peer节点的显示
exp-server.js/app.get("/networkpeer")
没参数，从数据库中读取


1.5dockerAPI实现容器启动和停止
app.get('/vpNodeController')
参数
peerName，根据节点名称去数据库中找到ip和容器id，然后通过docker remote api操作

  
2.管道管理部分（新增管道，修改管道，实际上包括了创建管道和把peer加入管道的逻辑）

2.1创建管道
app.get('/generateChannelFile')
参数
channelName，首先创建channel.tx文件


2.2修改管道

  
3.智能合约部分（上传（基本不用改），新增实例，安装，初始化，升级）
  
4.操作日志部分（写一个时间监听器实现（基本和0.6类似））


/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////// 优先级较低的功能 ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
1.peer0容器节点停掉自动切换到别的节点
2.统计图表数据的展现







/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////// 原balance-transfer的api /////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

/////////////////获取用户权限
http://35.197.24.106:4000/users
username=Jim
orgName=org1


/////////////////创建管道
http://35.197.24.106:4000/channels
authorization: Bearer $ORG1_TOKEN
{
	"channelName":"mychannel",
	"channelConfigPath":"../artifacts/channel/mychannel.tx"
}

/////////////////加入管道
http://35.197.24.106:4000/channels/mychannel/peers
authorization: Bearer $ORG1_TOKEN
{
	"peers": ["peer1","peer2"]
}

/////////////////安装智能合约
http://35.197.24.106:4000/chaincodes
authorization: Bearer $ORG1_TOKEN
{
	"peers": ["peer1", "peer2"],
	"chaincodeName":"mycc",
	"chaincodePath":"github.com/example_cc",
	"chaincodeVersion":"v0"
}

/////////////////初始化智能合约
http://35.197.24.106:4000/channels/mychannel/chaincodes
authorization: Bearer $ORG1_TOKEN
{
	"chaincodeName":"mycc",
	"chaincodeVersion":"v0",
	"args":["a","100","b","200"]
}

/////////////////调用智能合约
http://35.197.24.106:4000/channels/mychannel/chaincodes/mycc
authorization: Bearer $ORG1_TOKEN
{
	"fcn":"move",
	"args":["a","b","10"]
}

/////////////////查询智能合约
http://35.197.24.106:4000/channels/mychannel/chaincodes/mycc?peer=peer1&fcn=query&args='a'
authorization: Bearer $ORG1_TOKEN

/////////////////查询单个区块
http://35.197.24.106:4000/channels/mychannel/blocks/1?peer=peer1
authorization: Bearer $ORG1_TOKEN

/////////////////查询单个交易
http://35.197.24.106:4000/channels/mychannel/transactions/$TRX_ID?peer=peer1
authorization: Bearer $ORG1_TOKEN
ed523f80f6e0a1e61e8295e25f521b5461b7a152797eef63d5aa7b33190e5411

/////////////////查询管道
http://35.197.24.106:4000/channels/mychannel?peer=peer1
authorization: Bearer $ORG1_TOKEN

/////////////////查询已经安装的智能合约
http://35.197.24.106:4000/chaincodes?peer=peer1&type=installed
authorization: Bearer $ORG1_TOKEN

/////////////////查询已经初始化的智能合约
http://35.197.24.106:4000/chaincodes?peer=peer1&type=instantiated
authorization: Bearer $ORG1_TOKEN

/////////////////查询所有管道
http://35.197.24.106:4000/channels?peer=peer1
authorization: Bearer $ORG1_TOKEN